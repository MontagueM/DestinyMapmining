test_dir = 'D:/D2_Datamining/Package Unpacker/2_9_0_1/output_all/city_tower_d2_0369/'
map_unique_models = ['FFC7F380', 'FF90C580', 'FF21ED80', 'FE90C580', 'FE21ED80', 'FDD1BF80', 'FDCDC580', 'FDC7F380', 'FD90C580', 'FD17C780', 'FD13C780', 'FD5C5881', 'FCC7F380', 'FC25ED80', 'FC23ED80', 'FC16C780', 'FC13C780', 'FC5A5881', 'FBC7F380', 'FBC6F380', 'FB90C580', 'FAC7F380', 'FA20ED80', 'F6845981', 'F8625B81', 'F911C780', 'F814C780', 'F653FC80', 'F620ED80', 'F0605B81', 'F322ED80', 'F321ED80', 'F310C780', 'F290C580', 'F190C580', 'F121ED80', 'F80EC780', 'F67AFE80', 'F055FC80', 'F47AFE80', 'F023ED80', 'F9F1B980', 'F9C7F380', 'F8CCC580', 'F8C7F380', 'F6C7F380', 'F4F95781', 'F4AC5881', 'F2F45681', 'EF23ED80', 'EEC7F380', 'EDC7F380', 'ED13C780', 'EBF65781', 'EBC7F380', 'EB22ED80', 'EACDC580', 'E7865981', 'E1284081', 'E3495B81', 'E621ED80', 'E521ED80', 'E325ED80', 'E322ED80', 'E320ED80', 'E315C780', 'E120ED80', 'E025ED80', 'E9F35681', 'E9C8F380', 'E7F2B980', 'E6F45681', 'E4F1C480', 'E2C8F380', 'DFBEFE80', 'DF33ED80', 'DE55FC80', 'DD22ED80', 'DD5C5881', 'DC22ED80', 'DC01C780', 'DB23ED80', 'DB22ED80', 'DB5C5881', 'DAC7F380', 'D8845981', 'D3845981', 'D916C780', 'D901C780', 'D555FC80', 'D220ED80', 'D121ED80', 'D115C780', 'D22C4081', 'D021ED80', 'D9C7F380', 'D8C7F380', 'D8B9FE80', 'D7C7F380', 'D5B9FE80', 'D4BEFE80', 'D1EAFD80', 'D0B9FE80', 'CFF3FD80', 'CF0CC680', 'CEBFFE80', 'CE21ED80', 'CDC7F380', 'CD23ED80', 'CD21ED80', 'CCC7F380', 'CC23ED80', 'CBF45681', 'CBF35681', 'CBD1F380', 'CBC8F380', 'CB22ED80', 'CB21ED80', 'CAF45681', 'CAF1B980', 'CA23ED80', 'CA22ED80', 'CA20ED80', 'C9475B81', 'C935ED80', 'C923ED80', 'C922ED80', 'C920ED80', 'C823ED80', 'C822ED80', 'C722ED80', 'C720ED80', 'C520ED80', 'C023ED80', 'C15C5881', 'C9CDC580', 'C8F1B980', 'C8BEFE80', 'C7D1F380', 'C7BEFE80', 'C6F1B980', 'C6D1F380', 'C5F35681', 'BFBFFE80', 'BF23ED80', 'BE21ED80', 'BD21ED80', 'BCF1C480', 'BCC7F380', 'BBD1BF80', 'B9845981', 'B7234081', 'B922ED80', 'B901C780', 'B822ED80', 'B723ED80', 'B324ED80', 'B105C780', 'B37CFE80', 'B34CC480', 'B12CED80', 'B8CDC580', 'B7BDFE80', 'B04C5B81', 'B3F45681', 'B1C1F380', 'B0CFC580', 'AFF45681', 'AD13C780', 'AC25ED80', 'AC22ED80', 'AB7CFE80', 'A9835981', 'A3625B81', 'A921ED80', 'A816C780', 'A720ED80', 'A635ED80', 'A623ED80', 'A535ED80', 'A435ED80', 'A325ED80', 'A117C780', 'A95D5881', 'A94EC480', 'A026ED80', 'A6EAFD80', 'A4BFFE80', '97284081', '31675581', '93465B81', '64615B81', '29475B81', '27495B81', '9953FC80', '9224ED80', '9222ED80', '9211C780', '9124ED80', '9026ED80', '9024ED80', '8924ED80', '8824ED80', '08805B81', '8724ED80', '8720ED80', '8624ED80', '8524ED80', '8426ED80', '8424ED80', '8324ED80', '8224ED80', '8191C580', '7855FC80', '7809C780', '7521ED80', '7126ED80', '7025ED80', '6811C780', '6724ED80', '6522ED80', '6512C780', '6491C580', '6423ED80', '6422ED80', '6121ED80', '6017C780', '5821ED80', '5817C780', '5779FE80', '5724ED80', '5588C580', '5498F580', '5491C580', '5420ED80', '5322ED80', '5298F580', '5222ED80', '5122ED80', '5112C780', '4922ED80', '4812C780', '4557FC80', '4555FC80', '4416C780', '4332ED80', '4324ED80', '4224ED80', '4012C780', '3851C480', '3824ED80', '3748FC80', '3720ED80', '3656FC80', '3620ED80', '3556FC80', '3456FC80', '3432ED80', '3257FC80', '3057FC80', '2490C580', '2356FC80', '2321ED80', '2120ED80', '2012C780', '1721ED80', '1621ED80', '1534ED80', '1532ED80', '1526ED80', '1424ED80', '984B5B81', '965B5881', '929DFA80', '892C4081', '0891C580', '0791C580', '784CC480', '762FED80', '762BED80', '740EC780', '739DFA80', '610BC780', '479DFA80', '469DFA80', '459DFA80', '447C5A81', '0434ED80', '0424ED80', '424B5B81', '0421ED80', '0356FC80', '0332ED80', '252AED80', '242AED80', '0232ED80', '135B5881', '112A4081', '99BEFE80', '98D1BF80', '97FA5781', '95CFC580', '93F55681', '92F75781', '92F55681', '87CDC580', '087BFE80', '86BFFE80', '84C8F380', '78BAF480', '73BAF480', '72BEFE80', '70C8F380', '69CDC580', '69C7F380', '67F55681', '66D2BF80', '65D2BF80', '65CFC580', '64D2BF80', '63C8F380', '63C7F380', '062D4081', '59F25681', '56C8F380', '55C8F380', '53CFC580', '51F2B980', '50F2B980', '50D0C580', '49F45681', '47D2BF80', '46F15681', '43E85781', '43A3F480', '40BFFE80', '38F45681', '37C3F380', '36F15681', '35F45681', '35BEFE80', '35BAF480', '34F45681', '33C2F380', '32C2F380', '30F55681', '30C0F380', '28F15681', '28D2BF80', '27C7F380', '26F45681', '25F45681', '25F15681', '25CEC580', '25BEFE80', '24F55681', '24CEC580', '0022ED80', '21BFFE80', '20FC5781', '20CEC580', '19CEC580', '16CDC580', '11A0F480', '9F855981', '9F26ED80', '9F20ED80', '9E26ED80', '9E20ED80', '9DC8F380', '9D20ED80', '9CF55681', '9C20ED80', '9BBDFE80', '9B20ED80', '9B2C4081', '9A22ED80', '9A9DFA80', '8FF45681', '8F845981', '8F24ED80', '08F3B980', '08F2B980', '8E24ED80', '8E7A5A81', '8E2FED80', '8D24ED80', '8D4EC480', '8D4CC480', '8C24ED80', '8BC8F380', '8BB8F480', '8B24ED80', '8B21ED80', '8B17C780', '8AF55681', '8A26ED80', '8A22ED80', '7F23ED80', '7F20ED80', '07F3B980', '07F2B980', '7EF1FD80', '7EBBF480', '7E23ED80', '7D23ED80', '7CCDC580', '7C855981', '7C55FC80', '7C23ED80', '7BDFFB80', '7A55FC80', '7A4CC480', '6FD0C580', '6FC8F380', '6F24ED80', '6F20ED80', '6E845981', '6D91C580', '6C20ED80', '06C8F380', '6B20ED80', '6B9DFA80', '6B4C5B81', '6A20ED80', '5FF55681', '5F855981', '5F17C780', '5D855981', '5CF25681', '5C20ED80', '5C10C780', '05C8F380', '5BF25681', '5AF45681', '5AF25681', '5A12C780', '5A10C780', '4FF55681', '4FCDC580', '4F26ED80', '4F16C780', '04F3B980', '4EF55681', '4E07C780', '4DDFF380', '4D24ED80', '4C24ED80', '04BFFE80', '4BF55681', '4B855981', '4B24ED80', '4B21ED80', '4AC8F380', '4A7AFE80', '3F20ED80', '03F3B980', '3EC0F380', '3E56FC80', '3E23ED80', '3D455B81', '3D56FC80', '3D32ED80', '3D23ED80', '3D21ED80', '03D2F380', '3CF55681', '3C26ED80', '3C21ED80', '3B55FC80', '3B21ED80', '3AC8F380', '3A56FC80', '3A55FC80', '2FF55681', '2FF45681', '2F855981', '2F57FC80', '02F3B980', '2EFC5781', '2EF45681', '2E24ED80', '2E015B81', '2DBFFE80', '2D91C580', '2CEB5681', '02CDC580', '2CD8BF80', '2C91C580', '2C32ED80', '02C8F380', '2C02C780', '2BF45681', '2BD8BF80', '2B21ED80', '2AD8BF80', '2A5A5881', '1F495B81', '1F12C780', '1E635B81', '1E495B81', '1E485B81', '1E4E5B81', '1D32ED80', '1C91C580', '01C8F380', '1BF55681', '1B17C780', '1B2D4081', '0EB9F480', '0D34ED80', '0D32ED80', '0C57FC80', '0C34ED80', '00C8F380', '0C7BFE80', '0B57FC80', '0B34ED80', '0B32ED80', '0B7BFE80', '0A34ED80', '0A17C780']


def get_hex_data(direc):
    t = open(direc, 'rb')
    h = t.read().hex().upper()
    return h


def get_flipped_hex(h, length):
    if length % 2 != 0:
        print("Flipped hex length is not even.")
        return None
    return "".join(reversed([h[:length][i:i + 2] for i in range(0, length, 2)]))


files = ['0369-000002F9',  # Files not in the map
         '0369-000005D6',  # Files not in the map
         '0369-00000722',  # Files not in the map (some are)
         '0369-00000A99',  # Files not in the map
         '0369-00000B6D',  # Files not in the map
         '0369-00000B77',  # All models here in map
         '0369-00001364',
         '0369-000015ED',
         # '0369-0000166C',
         '0369-00001705',
         '0369-00001B0F',
         '0369-00001B4B',
         '0369-00001B9B',
         '0369-00001C09'
         ]

for file in files:
    # print(file)
    hex_data = get_hex_data(test_dir + file + '.bin')
    second_block = hex_data.split('BD9F8080')[2]
    # print(second_block)
    block_length = int(get_flipped_hex(second_block[:8], 8), 16)
    second_block_models = second_block[32:]
    # print(f'{block_length} models')
    models = [second_block_models[i:i+8] for i in range(0, block_length*8, 8)]
    counter = 0
    for model in models:
        if model in map_unique_models:
            counter += 1
        else:
            if 'B77' in file:
                print(f'{model} missing')
    print(f'{file} contains {counter} out of {block_length} models that exist in the map. {counter}/{len(map_unique_models)}')
