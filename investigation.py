import os
import pkg_db
import struct
from dataclasses import dataclass, fields, field
from typing import List
import numpy as np


@dataclass
class Stride12Header:
    EntrySize: np.uint32 = np.uint32(0)
    StrideLength: np.uint32 = np.uint32(0)
    DeadBeef: np.uint32 = np.uint32(0)


@dataclass
class Unk16Header:
    EntrySize: np.uint32 = np.uint32(0)
    Field4: np.uint32 = np.uint32(0)
    Field8: np.uint32 = np.uint32(0)
    FieldC: np.uint32 = np.uint32(0)


@dataclass
class Faces24Header:
    Field0: np.uint32 = np.uint32(0)
    Field4: np.uint32 = np.uint32(0)
    EntrySize: np.uint32 = np.uint32(0)
    FieldC: np.uint32 = np.uint32(0)
    DeadBeef: np.uint32 = np.uint32(0)
    Field14: np.uint32 = np.uint32(0)


def get_hex_data(direc):
    t = open(direc, 'rb')
    h = t.read().hex().upper()
    return h


def get_flipped_hex(h, length):
    """
    Flips the hex around so the data is read correctly eg 00 80 00 00 = 00 00 80 00. Takes every pair of bytes and
    flips them so AC 18 = 18 AC.
    :param h: the hex string to flip around
    :param length: how long this hex string is (len(h) doesn't work)
    :return: the flipped hex
    """
    if length % 2 != 0:
        print("Flipped hex length is not even.")
        return None
    return "".join(reversed([h[:length][i:i + 2] for i in range(0, length, 2)]))


test_dir = 'D:/D2_Datamining/Package Unpacker/2_9_0_1/output_all/'


def get_header(file_hex, header):
    # The header data is 0x16F bytes long, so we need to x2 as python reads each nibble not each byte

    for f in fields(header):
        if f.type == np.uint32:
            flipped = "".join(get_flipped_hex(file_hex, 8))
            value = np.uint32(int(flipped, 16))
            setattr(header, f.name, value)
            file_hex = file_hex[8:]
    return header


faces_array = []
faces_data_array = []


def get_faces_data(pkg_name, faces_header_24_file):
    pkg_db.start_db_connection('2_9_0_1')
    entries_refid = {x: y for x, y in pkg_db.get_entries_from_table(pkg_name, 'FileName, RefID')}
    entries_filetype = {x: y for x, y in pkg_db.get_entries_from_table(pkg_name, 'FileName, FileType')}

    ref_file_name = f'{pkg_name.split("_")[-1].upper()}-0000' + entries_refid[faces_header_24_file][2:]
    if entries_filetype[ref_file_name] == "Faces Header":  # Faces Header I think is the actual data
        faces_hex = get_hex_data(test_dir + '/' + pkg_name + '/' + ref_file_name + '.bin')
        int_faces_data = [[int(get_flipped_hex(faces_hex[i:i+4], 4), 16)+1, int(get_flipped_hex(faces_hex[i+4:i+8], 4), 16)+1] for i in range(0, len(faces_hex), 8)]

        # int_faces_data.sort(key=lambda x: x[1])
        for i in range(0, len(int_faces_data), 3):
            faces_data = 'f'
            for j in range(3):
                x = int_faces_data[i+j]
                faces_data += f' {x[0]}//{x[1]}'
            faces_data_array.append(faces_data)
        print(faces_data_array)
        print(f'Number of faces: {len(faces_data_array)}')
        # else:
        #     return
        #     # print(entries_filetype[ref_file_name])


def get_stride_data(pkg_name, stride_header_12_file):
    pkg_db.start_db_connection('2_9_0_1')
    entries_refid = {x: y for x, y in pkg_db.get_entries_from_table(pkg_name, 'FileName, RefID')}
    entries_filetype = {x: y for x, y in pkg_db.get_entries_from_table(pkg_name, 'FileName, FileType')}
    ref_file_name = f'{pkg_name.split("_")[-1].upper()}-0000' + entries_refid[stride_header_12_file][2:]
    if entries_filetype[ref_file_name] == "Stride Header":  # Stride Header I think is the actual data
        header_hex = get_hex_data(test_dir + '/' + pkg_name + '/' + stride_header_12_file + '.bin')
        stride_header = get_header(header_hex, Stride12Header())
        print(stride_header)
        return
        stride_hex = get_hex_data(test_dir + '/' + pkg_name + '/' + ref_file_name + '.bin')

        hex_floats = [stride_hex[i:i + stride_header.StrideLength*2] for i in range(0, len(stride_hex), stride_header.StrideLength*2)]
        floats = []
        for hex_float in hex_floats:
            float_value = struct.unpack('f', bytes.fromhex(hex_float))[0]
            floats.append(str(float_value))
        coords = [floats[i:i + 3] for i in range(0, len(floats), 3)]
        coords = [x for x in coords if len(x) == 3]
        print(len(coords))
        print(coords)
        # processed = [f'{int(get_flipped_hex(faces_data[i:i+4], 4), 16)+1}//{int(get_flipped_hex(faces_data[i+4:i+8], 4), 16)+1}' for i in range(0, len(faces_data), 8)]
    else:
        print(entries_filetype[ref_file_name])


def get_all_faces_data():
    pkg_db.start_db_connection('2_9_0_1')
    entries_filetype = {x: y for x, y in pkg_db.get_entries_from_table('city_tower_d2_0369', 'FileName, FileType')}
    for file_name, file_type in entries_filetype.items():
        # print(entries_refid[faces_header_name])
        if file_type == "Faces Header":  # Faces Header I think is the actual data
            get_faces_data(file_name)


def get_all_stride_data():
    pkg_db.start_db_connection('2_9_0_1')
    entries_filetype = {x: y for x, y in pkg_db.get_entries_from_table('city_tower_d2_0369', 'FileName, FileType')}
    for file_name, file_type in entries_filetype.items():
        # print(entries_refid[faces_header_name])
        if file_type == "Faces Header":  # Faces Header I think is the actual data
            get_faces_data(file_name)


# faces_header_name = '0369-00000017'
# stride_header_name = '0369-0000001A'
#
#
# for file in os.listdir(test_dir)[:100]:
#     faces_header_name = file.split('.bin')[0]
#     get_faces_data(faces_header_name)
# print(faces_array)
# print(sorted(faces_array))
# get_stride_data()

# get_all_faces_data()
# print(faces_array)
# print(sorted(faces_array))

# get_stride_data('0369-0000001A')
# get_stride_data('0369-00000E05')
# get_stride_data('0369-00001088')
# get_stride_data('0369-000014B9')
# get_stride_data('0369-00000C87')
# get_stride_data('0369-00001C49')
# get_stride_data('0369-00000BED')
get_faces_data('globals_01fe', '01FE-000012DA')
get_stride_data('globals_01fe', '01FE-000012E0')
get_stride_data('globals_01fe', '01FE-000012E1')

"f 1//1 2//1 3//2 f 1//1 3//2 4//3 f 1//1 4//3 5//1 f 6//1 1//1 5//1 f 6//1 7//1 1//1 f 6//1 8//2 7//1 f 3//2 9//4 4//3 f 4//3 10//5 5//1 f 11//6 5//1 10//5 f 11//6 12//1 5//1 f 13//7 5//1 12//1 f 13//7 14//1 5//1 f 6//1 5//1 14//1 f 6//1 14//1 15//1 f 11//6 10//5 16//8 f 13//7 12//1 17//1 f 13//7 18//9 14//1 f 13//7 19//10 18//9 f 11//6 20//11 12//1 f 11//6 21//12 20//11 f 22//13 23//14 24//15 f 24//15 25//16 22//13 f 26//17 22//18 25//18 f 25//18 27//19 26//17 f 26//20 27//20 28//20 f 28//20 29//20 26//20 f 29//20 28//20 30//20 f 30//20 31//20 29//20 f 32//21 31//22 30//23 f 30//23 33//23 32//21 f 34//24 32//25 33//24 f 33//24 35//26 34//24 f 36//27 34//27 35//27 f 35//27 37//27 36//27 f 36//28 37//28 38//28 f 38//28 39//28 36//28 f 39//28 38//28 40//28 f 40//28 41//28 39//28 f 42//29 41//29 40//30 f 40//30 43//30 42//29 f 44//31 42//31 43//31 f 43//31 45//31 44//31 f 46//32 44//32 45//33 f 45//33 47//34 46//32 f 46//35 47//35 48//35 f 48//35 49//35 46//35 f 49//35 48//35 50//35 f 50//35 51//35 49//35 f 52//36 51//37 50//38 f 50//38 53//36 52//36 f 54//39 52//40 53//41 f 53//41 55//42 54//39 f 56//43 54//43 55//44 f 55//44 57//45 56//43 f 56//46 57//46 58//46 f 58//46 59//46 56//46 f 59//46 58//46 60//46 f 60//46 61//46 59//46 f 62//47 61//48 60//49 f 60//49 63//50 62//47 f 64//51 65//51 66//51 f 66//51 67//51 64//51 f 68//52 64//53 67//54 f 67//54 69//55 68//52 f 70//56 68//57 69//57 f 69//57 71//56 70//56 f 72//58 70//59 71//60 f 71//60 73//61 72//58 f 72//1 73//1 74//1 f 74//1 75//1 72//1 f 76//62 75//63 74//62 f 74//62 77//64 76//62 f 76//65 77//65 78//65 f 78//66 79//66 76//66 f 80//67 79//67 78//67 f 78//67 81//67 80//67 f 80//46 81//46 82//46 f 82//46 83//46 80//46 f 84//35 85//35 86//35 f 84//35 86//35 87//35 f 84//35 87//35 88//35 f 87//35 89//35 88//35 f 89//35 90//35 88//35 f 90//35 91//35 88//35 f 90//35 92//35 91//35 f 92//35 93//35 91//35 f 94//20 95//20 96//20 f 94//20 96//20 97//20 f 96//20 98//20 97//20 f 98//20 99//20 97//20 f 99//20 100//20 97//20 f 100//20 101//20 97//20 f 100//20 102//20 101//20 f 99//20 103//20 100//20 f 104//51 105//51 106//51 f 106//51 107//51 104//51 f 108//52 104//53 107//54 f 107//54 109//55 108//52 f 110//57 108//57 109//57 f 109//57 111//57 110//57 f 112//68 110//69 111//70 f 111//70 113//61 112//68 f 112//1 113//1 114//1 f 114//1 115//1 112//1 f 116//64 115//64 114//64 f 114//64 117//64 116//64 f 116//65 117//65 118//65 f 118//66 119//66 116//66 f 120//67 119//67 118//67 f 118//67 121//67 120//67 f 120//46 121//46 122//46 f 122//46 123//46 120//46 f 124//35 125//35 126//35 f 124//35 126//35 127//35 f 124//35 127//35 128//35 f 127//35 129//35 128//35 f 129//35 130//35 128//35 f 130//35 131//35 128//35 f 130//35 132//35 131//35 f 132//35 133//35 131//35 f 134//20 135//20 136//20 f 134//20 136//20 137//20 f 136//20 138//20 137//20 f 138//20 139//20 137//20 f 139//20 140//20 137//20 f 140//20 141//20 137//20 f 140//20 142//20 141//20 f 139//20 143//20 140//20 f 144//71 145//71 146//71 f 146//71 147//71 144//71 f 147//72 146//72 148//72 f 148//73 149//73 147//73 f 149//74 148//74 150//74 f 150//75 151//75 149//75 f 151//76 150//76 152//76 f 152//77 153//77 151//77 f 153//78 152//78 154//78 f 154//79 155//79 153//79 f 155//80 154//80 156//80 f 156//81 157//81 155//81 f 157//82 156//82 158//82 f 158//83 159//83 157//83 f 159//84 158//84 160//84 f 160//85 161//85 159//85 f 162//86 163//86 164//86 f 164//87 165//87 162//87 f 165//88 164//88 166//88 f 166//89 167//89 165//89 f 167//90 166//90 168//90 f 168//91 169//91 167//91 f 169//92 168//92 170//92 f 170//93 171//93 169//93 f 171//94 170//94 172//94 f 172//95 173//95 171//95 f 173//96 172//96 174//96 f 174//97 175//97 173//97 f 175//98 174//98 176//98 f 176//99 177//99 175//99 f 177//100 176//100 178//100 f 178//100 179//100 177//100 f 180//35 181//35 182//35 f 180//35 182//35 183//35 f 182//35 184//35 183//35 f 184//35 185//35 183//35 f 185//35 186//35 183//35 f 186//35 187//35 183//35 f 186//35 188//35 187//35 f 188//35 189//35 187//35 f 184//35 190//35 185//35 f 184//35 191//35 190//35 f 191//35 192//35 190//35 f 185//35 193//35 186//35 f 185//35 194//35 193//35 f 194//35 195//35 193//35 f 196//20 197//20 198//20 f 196//20 198//20 199//20 f 198//20 200//20 199//20 f 200//20 201//20 199//20 f 201//20 202//20 199//20 f 202//20 203//20 199//20 f 203//20 204//20 199//20 f 203//20 205//20 204//20 f 200//20 206//20 201//20 f 206//20 207//20 201//20 f 206//20 208//20 207//20 f 201//20 209//20 202//20 f 209//20 210//20 202//20 f 209//20 211//20 210//20 f 212//101 213//101 214//101 f 214//102 215//102 212//102 f 216//103 212//104 215//103 f 215//103 217//105 216//103 f 218//106 216//107 217//106 f 217//106 219//108 218//106 f 220//109 218//110 219//109 f 215//111 214//111 221//111 f 221//112 222//112 215//112 f 217//113 215//114 222//115 f 222//115 223//116 217//113 f 219//117 217//118 223//117 f 223//117 224//117 219//117 f 225//119 219//120 224//119 f 219//109 225//121 220//109 f 226//122 220//122 225//122 f 225//122 227//122 226//122 f 228//123 226//124 227//124 f 222//125 221//125 229//125 f 229//126 230//126 222//126 f 223//127 222//128 230//127 f 230//127 231//129 223//127 f 224//130 223//131 231//130 f 231//130 232//130 224//130 f 233//132 224//133 232//132 f 224//119 233//134 225//119 f 227//135 225//136 233//137 f 233//137 234//138 227//135 f 235//139 227//139 234//139 f 227//124 235//140 228//123 f 230//141 229//141 236//141 f 236//142 237//142 230//142 f 231//143 230//144 237//143 f 237//143 238//145 231//143 f 232//146 231//147 238//146 f 238//146 239//146 232//146 f 240//148 232//149 239//148 f 232//132 240//150 233//132 f 234//151 233//152 240//151 f 240//151 241//153 234//151 f 242//154 234//154 241//154 f 234//155 242//155 235//155 f 237//156 236//156 243//156 f 243//157 244//157 237//157 f 238//158 237//159 244//158 f 244//158 245//160 238//158 f 239//161 238//161 245//161 f 245//161 246//162 239//161 f 247//163 239//163 246//163 f 239//148 247//164 240//148 f 241//165 240//166 247//165 f 247//165 248//165 241//165 f 249//167 241//167 248//167 f 241//168 249//168 242//168 f 244//169 243//169 250//169 f 250//170 251//170 244//170 f 245//171 244//172 251//172 f 251//172 252//171 245//171 f 246//173 245//174 252//173 f 252//173 253//175 246//173 f 254//176 246//177 253//176 f 246//163 254//178 247//163 f 248//179 247//179 254//179 f 254//179 255//180 248//179 f 256//181 248//181 255//181 f 248//182 256//182 249//182 f 251//183 250//183 257//183 f 257//184 258//184 251//184 f 252//185 251//186 258//185 f 258//185 259//187 252//185 f 253//188 252//189 259//190 f 259//190 260//191 253//188 f 261//192 253//193 260//192 f 253//176 261//194 254//176 f 255//195 254//195 261//195 f 261//195 262//195 255//195 f 263//196 255//196 262//196 f 255//197 263//197 256//197 f 258//198 257//199 264//200 f 264//200 265//200 258//198 f 259//201 258//202 265//201 f 265//201 266//203 259//201 f 260//204 259//205 266//204 f 266//204 267//206 260//204 f 268//207 260//208 267//209 f 260//192 268//210 261//192 f 262//211 261//211 268//211 f 268//211 269//212 262//211 f 270//213 262//213 269//213 f 262//214 270//214 263//214 f 267//209 271//215 268//207 f 269//216 268//216 271//216 f 271//216 272//217 269//216 f 273//218 269//218 272//218 f 269//219 273//219 270//219 f 272//220 274//220 273//220 f 275//221 276//221 277//221 f 277//222 278//222 275//222 f 279//223 275//223 278//223 f 278//223 280//223 279//223 f 281//224 279//225 280//224 f 280//224 282//226 281//224 f 283//227 281//228 282//229 f 278//230 277//230 284//230 f 284//231 285//231 278//231 f 280//232 278//233 285//232 f 285//232 286//232 280//232 f 282//234 280//235 286//236 f 286//236 287//237 282//234 f 288//238 282//239 287//238 f 282//229 288//240 283//227 f 289//241 283//241 288//241 f 288//241 290//242 289//241 f 291//243 289//244 290//245 f 285//246 284//246 292//246 f 292//247 293//247 285//247 f 286//248 285//249 293//248 f 293//248 294//250 286//248 f 287//251 286//252 294//251 f 294//251 295//253 287//251 f 296//254 287//255 295//254 f 287//238 296//256 288//238 f 290//257 288//257 296//257 f 296//257 297//257 290//257 f 298//258 290//258 297//258 f 290//245 298//259 291//243 f 293//260 292//260 299//260 f 299//261 300//261 293//261 f 294//262 293//263 300//262 f 300//262 301//264 294//262 f 295//265 294//266 301//265 f 301//265 302//267 295//265 f 303//268 295//269 302//269 f 295//254 303//270 296//254 f 297//271 296//272 303//271 f 303//271 304//271 297//271 f 305//273 297//273 304//273 f 297//274 305//274 298//274 f 300//275 299//275 306//275 f 306//276 307//276 300//276 f 301//277 300//277 307//277 f 307//277 308//277 301//277 f 302//278 301//279 308//278 f 308//278 309//280 302//278 f 310//281 302//282 309//281 f 302//269 310//283 303//268 f 304//284 303//284 310//284 f 310//284 311//285 304//284 f 312//286 304//286 311//286 f 304//287 312//287 305//287 f 307//288 306//288 313//288 f 313//289 314//289 307//289 f 308//290 307//291 314//290 f 314//290 315//292 308//290 f 309//293 308//294 315//293 f 315//293 316//293 309//293 f 317//295 309//296 316//295 f 309//281 317//297 310//281 f 311//298 310//298 317//298 f 317//298 318//298 311//298 f 319//299 311//299 318//299 f 311//300 319//300 312//300 f 314//301 313//301 320//301 f 320//302 321//302 314//302 f 315//303 314//304 321//305 f 321//305 322//306 315//303 f 316//307 315//307 322//307 f 322//307 323//307 316//307 f 324//308 316//308 323//308 f 316//295 324//295 317//295 f 318//309 317//310 324//309 f 324//309 325//309 318//309 f 326//311 318//311 325//311 f 318//312 326//312 319//312 f 321//313 320//314 327//315 f 327//315 328//316 321//313 f 322//317 321//318 328//319 f 328//319 329//320 322//317 f 323//321 322//321 329//321 f 329//321 330//322 323//321 f 331//323 323//324 330//325 f 323//308 331//326 324//308 f 325//327 324//328 331//327 f 331//327 332//329 325//327 f 333//330 325//330 332//330 f 325//331 333//331 326//331 f 330//325 334//332 331//323 f 332//333 331//334 334//335 f 334//335 335//336 332//333 f 336//337 332//337 335//337 f 332//338 336//338 333//338 f 335//339 337//339 336//339 f 338//340 339//340 340//340 f 338//340 340//340 341//341 f 338//340 341//341 342//342 f 340//340 343//340 341//341 f 343//340 344//340 341//341 f 345//343 344//340 343//340 f 345//343 346//340 344//340 f 347//344 343//340 340//340 f 347//344 348//340 343//340 f 349//345 343//340 348//340 f 349//345 350//340 343//340 f 345//343 343//340 350//340 f 345//343 350//340 351//346 f 345//343 351//346 352//347 f 347//344 340//340 353//346 f 347//344 353//346 354//348 f 349//345 355//340 350//340 f 347//344 356//340 348//340 f 349//345 348//340 357//349 f 349//345 357//349 358//350 f 359//351 360//351 361//351 f 359//352 362//352 360//352 f 359//353 363//353 362//353 f 359//354 364//354 363//354 f 359//355 365//355 364//355 f 359//356 366//356 365//356 f 359//357 367//357 366//357 f 359//358 361//358 368//358 f 359//359 368//359 369//359 f 359//360 369//360 370//360 f 359//361 370//361 371//361 f 359//362 371//362 372//362 f 359//363 372//363 373//363 f 359//364 373//364 374//364 f 359//365 374//365 375//365 f 359//366 375//366 367//366 f 376//367 377//367 378//367 f 376//368 379//368 377//368 f 376//369 380//369 379//369 f 376//370 381//370 380//370 f 376//371 382//371 381//371 f 376//372 383//372 382//372 f 376//373 384//373 383//373 f 376//374 378//374 385//374 f 376//375 385//375 386//375 f 376//376 386//376 387//376 f 376//377 387//377 388//377 f 376//378 388//378 389//378 f 376//379 389//379 390//379 f 376//380 390//380 391//380 f 376//381 391//381 392//381 f 376//382 392//382 384//382"